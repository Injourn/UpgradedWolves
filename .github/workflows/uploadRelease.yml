# This is a basic workflow to help you get started with Actions

name: CI 1.17

# Controls when the workflow will run
on:
  push:
    tags:
    - 'v1.17.*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout repository
        uses: actions/checkout@v2
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk 16
        uses: actions/setup-java@v1
        with:
          java-version: 16
      - uses: actions/cache@v2
        with: 
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew
      - name: Get ChangeLog
        id: changelog
        run: |
          MY_STRING=$(sed '/===/Q' changelog.txt)
          MY_STRING="${MY_STRING//'%'/'%25'}"
          MY_STRING="${MY_STRING//$'\n'/'%0A'}"
          MY_STRING="${MY_STRING//$'\r'/'%0D'}"
          echo "::set-output name=log::$MY_STRING"
      - name: buildwith Gradle
        run: ./gradlew build
      - uses: actions/github-script@v2
        id: fname
        with:
          result-encoding: string
          script: |
            const fs = require("fs")
            return fs.readdirSync("./build/libs/").filter(e => !e.endsWith("dev.jar") && !e.endsWith("sources.jar") && e.endsWith(".jar"))[0].replace(".jar", "");
      - name: Upload to curseforge
        uses: itsmeow/curseforge-upload@v2
        with:
          token: ${{ secrets.CFUPLOADKEY }}
          project_id: 509557
          game_endpoint: minecraft
          file_path: ./build/libs/${{ steps.fname.outputs.result }}.jar
          changelog: ${{ steps.changelog.outputs.log }}
          display_name: ${{ steps.fname.outputs.result }}
          game_versions: 73242:1.17.1,2:Java 16,68441:Forge
          release_type: release
      - name: Create Git Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.changelog.outputs.log }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./build/libs/${{ steps.fname.outputs.result }}
          asset_name: ${{ steps.fname.outputs.result }}
          asset_content_type: application/zip
